#include<stdio.h>
#include<stdlib.h>

void fcfs()
    {
        int head, a[20],i,distance,n,seektime;
        printf("\n Enter the Head position: ");
        scanf("%d",&head);
        printf("\nEnter the number of disk requests: ");
        scanf("%d",&n);
        printf("Enter the disk requests: ");
            for(i=1;i<=n;i++)
            scanf("%d",&a[i]);
            a[0]=head;
            printf("*****FCFS DISK SCHEDULING******************\n");
            for(i=0;i<n;i++)
            {
                distance= (a[i]>a[i+1])?a[i]-a[i+1]:a[i+1]-a[i];
                printf("Head movement from %d to %d:%d\n",a[i],a[i+1],distance);
                seektime=seektime+distance;
            }
            printf("Total seek time is : %d\n",seektime);


    }
    void main()
    {
        int ch;
        do
        {
            printf("\n menu\n 1.FCFS\n 2.C-SCAN\n 3.SCAN\n4.EXIT\n\nEnter the choice= ");
            scanf("%d",&ch);
            switch(ch)
            {
                case 1: fcfs();
                break;
               // case 2: cscan();
                break;
                //case 3: scan();
                break;
                case 4: break;

            }

        } while (ch!=4);
    }
include<stdio.h>
#include<stdlib.h>
int main()
{
﻿int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move;
﻿printf("Enter the number of Requests\n");
﻿scanf("%d",&n);
﻿printf("Enter the Requests sequence\n");
﻿for(i=0;i<n;i++)
﻿scanf("%d",&RQ[i]);
﻿printf("Enter initial head position\n");
﻿scanf("%d",&initial);
﻿printf("Enter total disk size\n");
﻿scanf("%d",&size);
﻿printf("Enter the head movement direction for high 1 and for low 0\n");
﻿scanf("%d",&move);
﻿
    // logic for C-Scan disk scheduling
﻿
        /*logic for sort the request array */
﻿for(i=0;i<n;i++)
    {
﻿for( j=0;j<n-i-1;j++)
        {
﻿if(RQ[j]>RQ[j+1])
            {
﻿int temp;
﻿temp=RQ[j];
                RQ[j]=RQ[j+1];
﻿RQ[j+1]=temp;
            }
        }
    }
﻿
﻿int index;
﻿for(i=0;i<n;i++)
    {
﻿if(initial<RQ[i])
        {
﻿index=i;
﻿break;
        }
    }
﻿
    // if movement is towards high value
﻿if(move==1)
    {
﻿for(i=index;i<n;i++)
﻿{﻿TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
﻿initial=RQ[i];
        }
        //  last movement for max size 
﻿TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
        /*movement max to min disk */
﻿TotalHeadMoment=TotalHeadMoment+abs(size-1-0);
﻿initial=0;
﻿for(﻿i=0;i<index;i++)
        {
﻿TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
﻿initial=RQ[i];
﻿
        }
    }
    // if movement is towards low value
﻿else
    {
﻿for(i=index-1;i>=0;i--)
        {
﻿TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
﻿initial=RQ[i];
        }
        //  last movement for min size 
﻿TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0);
        /*movement min to max disk */
﻿TotalHeadMoment=TotalHeadMoment+abs(size-1-0);
﻿initial =size-1;
﻿for(i=n-1;i>=index;i--)
        {
﻿TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
﻿initial=RQ[i];
        }
    }
﻿printf("Total head movement is %d",TotalHeadMoment);
﻿printf("\n");
﻿return 0;
}
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
OUTPUT
C-SCAN
﻿

﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
﻿
SCAN ALGORITHM
﻿
#include<stdio.h>
int﻿absoluteValue(int); // Declaring function absoluteValue
﻿
void main()
{
﻿int queue[25],n,headposition,i,j,k,seek=0, maxrange,
﻿difference, temp, queue1[20], queue2[20], temp1=0, temp2=0;
﻿float﻿averageSeekTime;
﻿
﻿printf("Enter the maximum range of Disk: ");
﻿scanf("%d", &maxrange);
﻿
﻿printf("Enter the number of queue requests: ");
﻿scanf("%d",&n);
﻿
﻿printf("Enter the initial head position: ");
﻿scanf("%d", &headposition);
﻿
﻿printf("Enter the disk positions to be read(queue): ");
﻿for(i=1;i<=n;i++)   
    {
﻿scanf("%d",&temp);  
﻿if(temp>headposition)
        {
﻿queue1[temp1]=temp; //temp1 is the index variable of queue1[]
﻿temp1++; //incrementing temp1
        }
﻿else﻿
        {   
﻿queue2[temp2]=temp; //temp2 is the index variable of queue2[]
﻿temp2++;
        }
    }
﻿
    //Now we have to sort the two arrays
    //SORTING array queue1[] in ascending order
﻿for(i=0;i<temp1-1;i++)
    {
﻿for(j=i+1;j<temp1;j++)
        {
﻿if(queue1[i]>queue1[j])
            {
﻿temp=queue1[i];
﻿queue1[i]=queue1[j];
﻿queue1[j]=temp;
            }
        }
    }
﻿
    //SORTING array queue2[] in descending order
﻿for(i=0;i<temp2-1;i++)
    {
﻿for(j=i+1;j<temp2;j++)
        {
﻿if(queue2[i]<queue2[j])
            {
﻿temp=queue2[i];
﻿queue2[i]=queue2[j];
﻿queue2[j]=temp;
            }
        }
    }    
﻿
    //Copying first array queue1[] into queue[]
﻿for(i=1,j=0;j<temp1;i++,j++)
    {
﻿queue[i]=queue1[j]; 
    }
﻿
﻿queue[i]=maxrange;
﻿
﻿for(i=temp1+2,j=0;j<temp2;i++,j++)
    {
﻿queue[i]=queue2[j];
    }
﻿
﻿queue[i]=0;
﻿queue[0]=headposition;
﻿
    // Calculating SEEK TIME. seek is initially set to 0 in the declaration part.
﻿
﻿for(j=0; j<=n; j++) //Loop starts from headposition. (ie. 0th index of queue) 
    {   
        // Finding the difference between next position and current position.
﻿difference = absoluteValue(queue[j+1]-queue[j]);
﻿
        // Adding difference to the current seek time value
﻿seek = seek + difference;
﻿
        // Displaying a message to show the movement of disk head
﻿printf("Disk head moves from position %d to %d with Seek %d \n",
﻿queue[j], queue[j+1], difference);
    }
﻿
    // Calculating Average Seek time 
﻿averageSeekTime = seek/(float)n;
﻿
    //Display Total and Average Seek Time(s)
﻿printf("Total Seek Time= %d\n", seek);
﻿printf("Average Seek Time= %f\n", averageSeekTime);
}
﻿
// Defining function absoluteValue
int﻿absoluteValue(int x)
{
﻿if(x>0)
    {
﻿return x;
    }
﻿else
    {
﻿return x*-1;
    }
}
﻿
﻿
﻿
OUTPUT
SCAN
﻿

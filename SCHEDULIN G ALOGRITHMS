#include<stdio.h>
#include<stdlib.h>

void fcfs()
{int i,n;
printf("\n      FCFS\n");
printf("enter no of process=\n");
scanf("%d",&n);
int pid[n],btime[n],wt[n],turntime[n];
for(int i=1;i<=n;i++)
{printf("enter pid of process %d=",i);
scanf("%d",&pid[i]);
}

printf("\nenter burst time:\n");
for(i=1;i<=n;i++)
{printf("p[%d]=",i);
scanf("%d",&btime[i]);
}

int wtime[n];
wtime[1]=0;

for(i=2;i<=n;i++)
{wtime[i]=btime[i-1]+wtime[i-1];

}
for(i=1;i<=n;i++)
{turntime[i]+=wtime[i];
turntime[i]=wtime[i]+btime[i];
}

printf("\npid   burst_time   wait_time   turntime\n");
for(int i=1;i<=n;i++)
{printf("%d\t  %d\t\t%d\t  %d\n",pid[i],btime[i],wtime[i],turntime[i]);
}

float avgwt,avgtt;
for(i=1;i<=n;i++)
{avgwt+=wtime[i];
avgtt+=turntime[i];
}
float a,b;
a=avgwt/n;
b=avgtt/n;
printf("\naverage waiting time=%f\naverage turnaround time=%f",a,b);
printf("\n\ngantt chart");
printf("\n========================\n");
int temp=0;
for(i=1;i<=n;i++)
{printf("p[%d] ",i);
}
printf("\n========================\n");
for(i=1;i<=n+1;i++)
{
printf("%d    ",temp);
temp=temp+btime[i];
}
printf("\n");
}


void sjf()
{int i,n;
printf("\n      SJF\n");
printf("enter no of process=\n");
scanf("%d",&n);
int pid[n],btime[n],wt[n],turntime[n],j,temp;
for(int i=1;i<=n;i++)
{printf("enter pid of process %d=",i);
scanf("%d",&pid[i]);
}

printf("\nenter burst time:\n");
for(i=1;i<=n;i++)
{printf("p[%d]=",i);
scanf("%d",&btime[i]);
}

for (i = 0; i < n ; i++) {
        for (j = 0; j < n - i; j++) {
            if (btime[j] > btime[j + 1]) {
                temp = pid[j];
                pid[j] = pid[j + 1];
                pid[j + 1] = temp;

                temp = btime[j];
                btime[j] = btime[j + 1];
                btime[j + 1] = temp;

             
            }
        }
    }
    
int wtime[n];
wtime[1]=0;

for(i=2;i<=n;i++)
{wtime[i]=btime[i-1]+wtime[i-1];

}
for(i=1;i<=n;i++)
{turntime[i]+=wtime[i];
turntime[i]=wtime[i]+btime[i];
}

printf("\npid   burst_time   wait_time   turntime\n");
for(int i=1;i<=n;i++)
{printf("%d\t  %d\t\t%d\t  %d\n",pid[i],btime[i],wtime[i],turntime[i]);
}

float avgwt,avgtt;
for(i=1;i<=n;i++)
{avgwt+=wtime[i];
avgtt+=turntime[i];
}
float a,b;
a=avgwt/n;
b=avgtt/n;
printf("\naverage waiting time=%f\naverage turnaround time=%f",a,b);
printf("\n\ngantt chart");
printf("\n========================\n");
int ttemp=0;
for(i=1;i<=n;i++)
{printf("p[%d] ",i);
}
printf("\n========================\n");
for(i=1;i<=n+1;i++)
{

printf("%d    ",ttemp);
ttemp=ttemp+btime[i];

}
printf("\n");
}    


void priority() 
{
    int n, btime[20], wtime[20], tat[20], priority[20], pid[20];
    int i, j, temp, sum1 = 0, sum2 = 0;
    float avgtt, avgwt;
    printf("\n      PRIORITY\n");
    printf("Enter no of processes: ");
    scanf("%d", &n);

    printf("Enter process ID, burst time, and priority of the processes:\n");
    for (i = 0; i < n; i++) 
    {
        printf("\nProcess %d:\n", i + 1);
        printf("PID= ");
        scanf("%d", &pid[i]);
        printf("Burst Time= ");
        scanf("%d", &btime[i]);
        printf("Priority= ");
        scanf("%d", &priority[i]);
    }

    for (i = 0; i < n - 1; i++) 
    {for (j = 0; j < n - i - 1; j++) 
       {if (priority[j] > priority[j + 1]) 
           {
                temp = pid[j];
                pid[j] = pid[j + 1];
                pid[j + 1] = temp;

                temp = btime[j];
                btime[j] = btime[j + 1];
                btime[j + 1] = temp;

                temp = priority[j];
                priority[j] = priority[j + 1];
                priority[j + 1] = temp;
            }
        }
    }

    wtime[0] = 0;
    for (i = 1; i < n; i++) 
    {
        wtime[i] = btime[i - 1] + wtime[i - 1];
        sum1 += wtime[i];
    }

    for (i = 0; i < n; i++) 
    {
        tat[i] = btime[i] + wtime[i];
        sum2 += tat[i];
    }

    avgtt = sum2 / n;
    avgwt = sum1 / n;

    printf("\navg turnaround time: %f\n", avgtt);
    printf("avg waiting time: %f\n", avgwt);

    printf("\nPID\tB_time\tW_time\tTA_time\n");
    for (i = 0; i < n; i++)
        printf("p[%d]\t%d\t%d\t%d\n", pid[i], btime[i], wtime[i], tat[i]);

    printf("\ngantt Chart:\n");
    printf("===============================\n");

    for (i = 0; i < n; i++)
        printf("  p[%d]  ", pid[i]);
    printf("\n");
    printf("================================\n");

    int temp_time = 0;
    for (i = 0; i < n; i++) 
    {
        printf("%d\t", temp_time);
        temp_time += btime[i];
    }
    printf("%d\n", temp_time);
}


int roundrobin()
{
int i, limit, total = 0, x, counter = 0, time_quantum;
int wait_time = 0, turnaround_time = 0, burst_time[10], temp[10];
float average_wait_time, average_turnaround_time;
printf("\n      ROUND ROBIN\n");
printf("\nEnter Total Number of Processes:");
scanf("%d", &limit);
x = limit;
for(i = 0; i < limit; i++)
{
printf("\nEnter Details of Process[%d]\n", i + 1);
printf("Burst Time:");
scanf("%d", &burst_time[i]);
temp[i] = burst_time[i];
}
printf("\nEnter Time Quantum:");
scanf("%d", &time_quantum);
printf("\nProcess ID\t\tBurst Time\t Turnaround Time\t Waiting Time\n");
for(total = 0, i = 0; x != 0;)
{
if(temp[i] <= time_quantum && temp[i] > 0)
{
total = total + temp[i];
temp[i] = 0;
counter = 1;
}
else if(temp[i] > 0)
{
temp[i] = temp[i] - time_quantum;
total = total + time_quantum;
}
if(temp[i] == 0 && counter == 1)
{
x--;
printf("\nProcess[%d]\t\t%d\t\t %d\t\t\t %d", i + 1, burst_time[i], total,
total - burst_time[i]);
wait_time = wait_time + total - burst_time[i];
turnaround_time = turnaround_time + total ;
counter = 0;
}
if(i == limit - 1)
{
i = 0;
}
else
{
i++;
}
}
average_wait_time = wait_time * 1.0 / limit;
average_turnaround_time = turnaround_time * 1.0 / limit;
printf("\n\nAverage Waiting Time:\t%f", average_wait_time);
printf("\nAvg Turnaround Time:\t%f\n", average_turnaround_time);
}


void main()
{int ch;
do
{printf("\n     MENU\n1=fcfs\n2=sjf\n3=priority\n4=roundrobin\n5=exit\nenter choice=");
scanf("%d",&ch);
switch(ch)
{case 1:fcfs();
break;
case 2:sjf();
break;
case 3:priority();
break;
case 4:roundrobin();
break;
case 5:break;
}
}while(ch!=5);
}
